@{
    ViewData["Title"] = "Home Page";
    MessengerHealth.Models.MessengerFiles messengerFiles = new MessengerHealth.Models.MessengerFiles();
}

@model List<Dictionary<string, MessengerHealth.Models.MessengerFiles>>

<img id="pitlogo" src="~/Content/Img/expeditors-logo.png" class="img-responsive top-left" alt="..." />
<div>
    <div class="text-center">
        <h1 class="text-info text-uppercase">Messenger</h1>
    </div>
    <form id="mainForm" method="get" enctype="multipart/form-data" asp-controller="Home" asp-action="Index" class="form-group text-center">

        <input id="submit" type="submit" value="REFRESH" class="btn btn-primary btn-lg" />
        <div class="form-check form-switch">
            <input class="form-check-input" id="refreshCheck" type="checkbox" name="refreshCheck" checked>
            <label class="form-check-label" for="refreshCheck">Auto Refresh?</label>
        </div>
    </form>
    <input type="text" id="serviceInput" onkeyup="filterService()" placeholder="Search for service" class="input-lg" />
    @{
        <div id="novoP">
            <table id="main-table" class="table table-hover table-striped table-responsive table-bordered">
                <thead>
                    <tr>
                        <th scope="col" class="text-center">Operation</th>
                        <th scope="col" class="text-center">Service</th>
                        <th scope="col" class="text-center">Total Files</th>
                        <th scope="col" class="text-center">Last File Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var kvp in @Model)
                    {
                        var keys = kvp.Keys;

                        foreach (string key in keys)
                        {
                            string directoryName;
                            string jurisdictionCode;
                            string operation;
                            if (key.Contains("Out"))
                            {
                                jurisdictionCode = key.Substring(key.LastIndexOf("\\") -2, 2);
                                directoryName = jurisdictionCode + "/";
                            }
                            else
                            {
                                jurisdictionCode = key.Substring(key.LastIndexOf("\\") - 2, 2);
                                directoryName = jurisdictionCode + "/";
                            }
                            kvp.TryGetValue(key, out messengerFiles);
                            operation = messengerFiles.ServiceCode;
                            string tempTxt = messengerFiles.DirectoryPath;
                            string txt = messengerFiles.GetShortFileName();
                            if (tempTxt.Contains("XML"))
                            {
                                directoryName += tempTxt.Substring(tempTxt.LastIndexOf("\\") - 3);
                                if (directoryName.Contains("\\"))
                                {
                                    directoryName = directoryName.Replace("\\", "/");
                                }
                            }
                            else
                            {
                                directoryName = directoryName + txt;
                            }
                            if (!String.IsNullOrEmpty(txt))
                            {
                                <p id="@operation@directoryName" hidden>@messengerFiles.TotalFiles</p>
                                <tr>
                                    <td scope="row" class="text-center">@operation</td>
                                    <td scope="row" class="text-center">@directoryName</td>
                                    <td scope="row" class="text-center">@messengerFiles.TotalFiles</td>
                                    <td scope="row" class="text-center">@messengerFiles.LastWrittenDate</td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    }
    <div>
        <canvas id="myChartIn"></canvas>
    </div>
    <div>
        <canvas id="myChartOut"></canvas>
    </div>
</div>

        <script src="~/Scripts/chart.js"></script>
        @section scripts{
            <script>
                $(document).ready(function () {

                    $('#pitlogo').click(() => {
                        let pitdroidMessage = document.getElementById('pitdroid-mes');
                        if (pitdroidMessage == null) {
                            $('<h3>').html(generateRandomText(randomMessagges)).attr('id', 'pitdroid-mes').addClass('text-success').insertBefore(pEle);
                        } else {
                            let currentMessage = pitdroidMessage.textContent;
                            while (currentMessage == pitdroidMessage.textContent) {
                                $(pitdroidMessage).html(generateRandomText(randomMessagges));
                            }
                        }
                    });

                    const randomMessagges = {
                        "message1": "\"You know, it's costing me a lot of money to keep these droids even powered up\"",
                        "message2": "I don't know you... What can I do for you? You look like a Jedi. Whatever it is... I didn't do it"
                    };

                    function generateRandomText(textObj) {
                        if (textObj != null) {
                            let keys = Object.keys(textObj);
                            let rdn = -1;
                            while (rdn < 0) {
                                rdn = Math.floor(Math.round(Math.random() * keys.length - 1, 1));
                            }
                            let selectedMessage = keys[rdn];
                            return textObj[selectedMessage];
                        }
                        return "";
                    }

                    const pEle = document.getElementById('novoP');
                    const paragraph = pEle.children;
                    let finalLabelsIn = [];
                    let finalDataIn = [];
                    let finalLabelsOut = [];
                    let finalDataOut = [];

                    $(paragraph).each((index, p) => {
                        let pId = p.id;
                        if (pId.includes("Resp")) {
                            pId = pId.replace("Resp", "");
                            let txt = parseInt(p.innerHTML);
                            if (txt > 0) {
                                finalLabelsIn.push(pId);
                                finalDataIn.push(txt);
                            }
                        }
                        if (pId.includes("Send")) {
                            pId = pId.replace("Send", "");
                            let txt = parseInt(p.innerHTML);
                            if (txt > 0) {
                                finalLabelsOut.push(pId);
                                finalDataOut.push(txt);
                            }
                        }
                    });

                    setInterval(function () {
                        if (document.getElementById('refreshCheck').checked) {
                            location.reload();
                        }
                    }, 30000)

                    //Chart below
                    const ctx = document.getElementById('myChartIn');

                    new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: finalLabelsIn,
                            datasets: [{
                                label: 'Number of Files',
                                data: finalDataIn,
                                borderWidth: 3
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                title: {
                                    display: true,
                                    text: "IN MESSAGES"
                                },
                                legend: {
                                    labels: {
                                        boxWidth: 60,
                                        boxHeight: 10,
                                        font: {
                                            size: 14
                                        }
                                    }
                                }
                            }
                        }
                    });

                    const ctxOut = document.getElementById('myChartOut');

                    const myChartOut = new Chart(ctxOut, {
                        type: 'pie',
                        data: {
                            labels: finalLabelsOut,
                            datasets: [{
                                label: 'Number of Files',
                                data: finalDataOut,
                                borderWidth: 3
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                title: {
                                    display: true,
                                    text: "OUT MESSAGES"
                                },
                                legend: {
                                    labels: {
                                        boxWidth: 60,
                                        boxHeight: 10,
                                        font: {
                                            size: 14
                                        }
                                    }
                                }
                            }
                        }
                    });
                });

                function filterService()
                {
                    var input, filter, table, tr, td, i, txtValue
                    input = document.getElementById("serviceInput");
                    filter = input.value.toUpperCase();
                    table = document.getElementById("main-table");
                    tr = table.getElementsByTagName("tr");
                    console.log(filter);
                    for (i = 0; i < tr.length; i++) {
                        td = tr[i].getElementsByTagName("td")[1];
                        if (td) {
                            txtValue = td.textContent || td.innerText;
                            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                                tr[i].style.display = "";
                            } else {
                                tr[i].style.display = "none";
                            }
                        }
                    }
                }
            </script>
        }
